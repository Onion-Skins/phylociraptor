#!/bin/bash

#module load singularity/3.5.2-gcc-9.1.0-fp2564h
set -e

usage() {
        echo "Welcome to phylociraptor. The rapid phylogenomic tree calculator pipeline."
        echo
        echo "Usage: $0 [-v] [-t <submission_system>] [-c <cluster_config_file>] [-s <snakemke_args>] [-m <mode>]"
        echo
        echo "Options:"
        echo "  -t <submission_system> Specify available submission system. Options: sge, slurm, serial (no submission system). Default: Automatic detection."
        echo "  -c <cluster_config_file> Path to cluster config file in YAML format (mandatory). "
        echo "  -s <snakemake_args> Additional arguments passed on to the snakemake command (optional). snakemake is run with --immediate-submit -pr --notemp --latency-wait 600 --use-singularity --jobs 1001 by default."
        echo "  -i \"<singularity_args>\" Additional arguments passed on to singularity (optional). Singularity is run with -B /tmp:/usertmp by default."
        echo "  -m <mode> Specify runmode, separated by comma. Options: busco, align, model, tree, speciestree"
	echo
	echo "  --add-genomes will check for and add  additional genomes (in case they were added to the config files)." 
	echo "  --dry Invokes a dry-run. Corresponds to: snakemake -n"
	echo "  --report This creates an overview report of the run."
	echo "  --setup Will download the genomes and prepare the pipeline to run."
	echo "  --remove Resets the pipeline. Will delete all results, logs and checkpoints."
	echo
        1>&2; exit 1; }

version() {
        echo "$0 v0.1"
        exit 0
}
CLUSTER=""
CLUSTER_CONFIg=""
SETUP=""
RUNMODE=""
REMOVE="FALSE"
REPORT=""
DRY=""
NJOBS="10001"

while getopts ":v:t:c:s:m:-:" option;
        do
                case "${option}"
                in
                        v) version;;
                        t) CLUSTER=${OPTARG};;
                        c) CLUSTER_CONFIG=${OPTARG};;
                        s) SM_ARGS=${OPTARG};;
                        i) SI_ARGS=${OPTARG};;
                        m) RUNMODE=${OPTARG};;
			-) LONG_OPTARG="${OPTARG#*}"
				case $OPTARG in
					add-genomes) ADD="TRUE";;
					setup) SETUP="TRUE" ;;
					remove) REMOVE="TRUE" ;;
					report) REPORT="TRUE" ;;
					dry) DRY="-n" ;;
					'' ) break ;;
					*) echo "Illegal option --$OPTARG" >&2; usage; exit 2 ;;
				esac ;;	
                        *) echo "Illegal option --$OPTARG\n" >&2; usage;;
                        ?) echo "Illegal option --$OPTARG\n" >&2 usage;;
                esac
        done
#SM_ARGS="--quiet"
if [ $OPTIND -eq 1 ]; then usage; fi
echo $SETUP
if [[ $REMOVE == "TRUE" ]]; then
	echo "WARNING: This command will delete all previously generated results."
	read -r -p "Are you sure [y/n]? " yn
	if [[ $yn == "y" ]]; then
		echo "Deleting all results, logs and checkpoints..."
		rm -r results/*
		rm -r log/*
		rm -r checkpoints/*
		echo "...done"
		exit 0
	else
		echo "Not deleting anything"
		exit 0
	fi
fi

if [[ $SETUP == "TRUE" ]]; then
	if [[ -f .phylogenomics_setup.done ]]; then
		read -r -p "Setup has been run previously. Are you sure you want to rerun this step? [y/n]? " yn
		if [[ $yn == "y" ]]; then
			rm .phylogenomics_setup.done
			echo "Will run setup of pipeline"
			snakemake --use-singularity --singularity-args "$SI_ARGS" -pr --notemp --latency-wait 600 -r setup --cores 1 -f
			exit 0
		else
			echo "Will not run setup."
			exit 0
		fi
	else
		echo "Will run setup of pipeline"
		snakemake --use-singularity --singularity-args "$SI_ARGS" -pr --notemp --latency-wait 600 -r setup --cores 1
		exit 0
	fi
fi

if [[ $ADD == "TRUE" ]]; then
	echo "Will rerun part which downloades, copies and renames genomes to add additional ones."
	
	if [[ ! -f .phylogenomics_setup.done ]]; then
		echo "Setup has not been run before. You have to run --setup first to be able to run this."
		exit 1
	fi
	rm -f results/checkpoints/download_genomes.done
	rm -f results/checkpoints/rename_assemblies.done
	rm -f .add_genomes.done
	snakemake --use-singularity --singularity-args "$SI_ARGS" -pr --notemp --latency-wait 600 -r add_genomes --cores 1
	exit 0
	fi


# Testing warning
echo "WARNING: The submission script is still in testing mode! Check the snakemake command inside before moving into production!"

# Determine submission system:
if [[ $CLUSTER == "sge" ]]; then
	echo "SGE (Sun Grid Engine) submission system specified. Will use qsub to submit jobs."
elif [[ $CLUSTER == "slurm" ]]; then
	echo "SLURM submission system specified. Will use sbatch to submit jobs."
elif [[ $CLUSTER == "serial" ]]; then
  echo "Serial execution without job submission specified."
else
	echo "No or unknown submission system specified, will try to detect the system automatically."
	CLUSTER=""
	command -v qsub >/dev/null 2>&1 && { echo >&2 "SGE detected, will use qsub to submit jobs."; CLUSTER="sge"; }
	command -v sbatch >/dev/null 2>&1 && { echo >&2 "SLURM detected, will use sbatch to submit jobs."; CLUSTER="slurm"; }
  if [[ $CLUSTER == "" ]]; then
    echo "Submission system could not be detected. You may be able to run the pipeline without job submission."
    exit 1
  fi
fi

# create report if flag is set
if [[ $REPORT == "TRUE" ]]; then
	#snakemake --use-conda --use-singularity --singularity-args "$SI_ARGS" -pr --cores 1 --notemp -r report $SM_ARGS
	singularity exec docker://reslp/rmarkdown:4.0.3 Rscript -e "rmarkdown::render('./bin/report.Rmd')"
	mv bin/report.html results/report.html
	exit 0
fi

# add runmode for single rules, this is for testing
if [[ $RUNMODE == *"single"* ]]; then
	echo "Runmode set to: single. I hope you know what you are doing ..."
  	if [[ $CLUSTER == "slurm" ]]; then
        	export CONDA_PKGS_DIRS="$(pwd)/.conda_pkg_tmp"
          	mkdir -p .conda_pkg_tmp
          	snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --cluster '$(pwd)/bin/immediate_submit.py {dependencies} slurm' --immediate-submit -pr --notemp --latency-wait 600 $SM_ARGS $DRY
        	unset CONDA_PKGS_DIRS
  	elif [[ $CLUSTER == "sge" ]]; then
        	snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --cluster "$(pwd)/bin/immediate_submit.py '{dependencies}' sge" --immediate-submit -pr --notemp --latency-wait 600 $SM_ARGS $DRY
  	elif [[ $CLUSTER == "serial" ]]; then
    		snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" -pr --notemp $SM_ARGS $DRY
  	else
          	echo "Submission system not recognized"
          	exit 1
	fi
fi
# these if cases are still crude and do not cover all possible combinations!
if [[ $RUNMODE == *"busco"* ]]; then
  if [[ ! -f ".phylogenomics_setup.done" ]]; then
	echo "You must first run phylogenomics --setup to run the pipeline"
	exit 0
  fi
  echo "Runmode set to: busco. Will run first part of pipeline to generate BUSCO results.."
  if [[ $CLUSTER == "slurm" ]]; then
          export CONDA_PKGS_DIRS="$(pwd)/.conda_pkg_tmp"
          mkdir -p .conda_pkg_tmp
          snakemake --use-conda --use-singularity --singularity-args "$SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --cluster '$(pwd)/bin/immediate_submit.py {dependencies} slurm' --immediate-submit -pr --notemp --latency-wait 600 -r part1 $SM_ARGS $DRY
  	unset CONDA_PKGS_DIRS
  elif [[ $CLUSTER == "sge" ]]; then
  	snakemake --use-conda --use-singularity --singularity-args "$SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --cluster "$(pwd)/bin/immediate_submit.py '{dependencies}' sge" --immediate-submit -pr --notemp --latency-wait 600 -r part1 $SM_ARGS $DRY
  elif [[ $CLUSTER == "serial" ]]; then
    snakemake --use-conda --use-singularity --singularity-args "$SI_ARGS" -pr --notemp $SM_ARGS -r part1 $DRY
  else
          echo "Submission system not recognized"
          exit 1
  fi
fi

if [[ $RUNMODE == *"align"* ]]; then
  if [[ ! -f ".phylogenomics_setup.done" ]]; then
        echo "You must first run phylogenomics --setup to run the pipeline"
        exit 0
  fi
  if [[ ! -f "checkpoints/part1.done" ]]; then
        echo "You must first phylogenomics -m busco to run this part of the pipeline"
        exit 0
  fi
  mkdir -p .usr_tmp
  echo "Runmode set to: align. Will run second part of pipeline to generate alignments.."
  if [[ $CLUSTER == "slurm" ]]; then
          export CONDA_PKGS_DIRS="$(pwd)/.conda_pkg_tmp"
          mkdir -p .conda_pkg_tmp
          snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --cluster '$(pwd)/bin/immediate_submit.py {dependencies} slurm' --immediate-submit -pr --notemp --latency-wait 600 -r part2 $SM_ARGS $DRY
        unset CONDA_PKGS_DIRS
  elif [[ $CLUSTER == "sge" ]]; then
        snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --cluster "$(pwd)/bin/immediate_submit.py '{dependencies}' sge" --immediate-submit -pr --notemp --latency-wait 600 -r part2 $SM_ARGS $DRY
  elif [[ $CLUSTER == "serial" ]]; then
    snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" -pr --notemp $SM_ARGS -r part2 $DRY
  else
          echo "Submission system not recognized"
          exit 1
  fi
fi

if [[ $RUNMODE == *"model"* ]]; then
  if [[ ! -f ".phylogenomics_setup.done" ]]; then
        echo "You must first run phylogenomics --setup to run the pipeline"
        exit 0
  fi
 if [[ ! -f "checkpoints/part1.done" ]]; then
        echo "You must first phylogenomics -m busco to run this part of the pipeline"
        exit 0
  fi
 if [[ ! -f "checkpoints/part2.done" ]]; then
        echo "You must first phylogenomics -m align to run this part of the pipeline"
        exit 0
  fi

  echo "Runmode set to: model. Will run substitution model testing with IQTREE"
  if [[ $CLUSTER == "slurm" ]]; then
          export CONDA_PKGS_DIRS="$(pwd)/.conda_pkg_tmp"
          mkdir -p .conda_pkg_tmp
          snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --cluster '$(pwd)/bin/immediate_submit.py {dependencies} slurm' --immediate-submit -pr --notemp --latency-wait 600 -r part_modeltest $SM_ARGS $DRY
        unset CONDA_PKGS_DIRS
  elif [[ $CLUSTER == "sge" ]]; then
        snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --cluster "$(pwd)/bin/immediate_submit.py '{dependencies}' sge" --immediate-submit -pr --notemp --latency-wait 600 -r part_modeltest $SM_ARGS $DRY
  elif [[ $CLUSTER == "serial" ]]; then
    snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" -pr --notemp $SM_ARGS -r part_modeltest $DRY
  else
          echo "Submission system not recognized"
          exit 1
  fi
fi


if [[ $RUNMODE == "tree" ]]; then
  if [[ ! -f ".phylogenomics_setup.done" ]]; then
        echo "You must first run phylogenomics --setup to run the pipeline"
        exit 0
  fi
 if [[ ! -f "checkpoints/part1.done" ]]; then
        echo "You must first phylogenomics -m busco to run this part of the pipeline"
        exit 0
  fi
 if [[ ! -f "checkpoints/part2.done" ]]; then
        echo "You must first phylogenomics -m align to run this part of the pipeline"
        exit 0
  fi

  echo "Runmode set to: tree. Will run concatenated (supermatix) tree reconstruction."
  if [[ $CLUSTER == "slurm" ]]; then
          export CONDA_PKGS_DIRS="$(pwd)/.conda_pkg_tmp"
          mkdir -p .conda_pkg_tmp
          snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --cluster '$(pwd)/bin/immediate_submit.py {dependencies} slurm' --immediate-submit -pr --notemp --latency-wait 600 -r part3 $SM_ARGS $DRY
        unset CONDA_PKGS_DIRS
  elif [[ $CLUSTER == "sge" ]]; then
        snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --cluster "$(pwd)/bin/immediate_submit.py '{dependencies}' sge" --immediate-submit -pr --notemp --latency-wait 600 -r part3 $SM_ARGS $DRY
  elif [[ $CLUSTER == "serial" ]]; then
    snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" -pr --notemp $SM_ARGS -r part3 $DRY
  else
          echo "Submission system not recognized"
          exit 1
  fi
fi

if [[ $RUNMODE == *"speciestree"* ]]; then
  if [[ ! -f ".phylogenomics_setup.done" ]]; then
        echo "You must first run phylogenomics --setup to run the pipeline"
        exit 0
  fi
 if [[ ! -f "checkpoints/part1.done" ]]; then
        echo "You must first phylogenomics -m busco to run this part of the pipeline"
        exit 0
  fi
 if [[ ! -f "checkpoints/part2.done" ]]; then
        echo "You must first phylogenomics -m align to run this part of the pipeline"
        exit 0
  fi

  echo "Runmode set to: speciestree. Will run species tree reconstruction."
  if [[ $CLUSTER == "slurm" ]]; then
          export CONDA_PKGS_DIRS="$(pwd)/.conda_pkg_tmp"
          mkdir -p .conda_pkg_tmp
          snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --cluster '$(pwd)/bin/immediate_submit.py {dependencies} slurm' --immediate-submit -pr --notemp --latency-wait 600 -r speciestree $SM_ARGS $DRY
        unset CONDA_PKGS_DIRS
  elif [[ $CLUSTER == "sge" ]]; then
        snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --cluster "$(pwd)/bin/immediate_submit.py '{dependencies}' sge" --immediate-submit -pr --notemp --latency-wait 600 -r speciestree $SM_ARGS $DRY
  elif [[ $CLUSTER == "serial" ]]; then
    snakemake --use-conda --use-singularity --singularity-args "-B $(pwd)/.usr_tmp:/usertmp $SI_ARGS" -pr --notemp $SM_ARGS -r speciestree $DRY
  else
          echo "Submission system not recognized"
          exit 1
  fi
fi


# these if cases are still crude and do not cover all possible combinations!
if [[ $RUNMODE == *"all"* ]]; then
  if [[ ! -f "checkpoints/busco.done" ]]; then
        echo "You must first run part 1 of the pipeline."
        exit 0
  fi
  echo "Runmode set to: all."
  if [[ $CLUSTER == "slurm" ]]; then
          export CONDA_PKGS_DIRS="$(pwd)/.conda_pkg_tmp"
          mkdir -p .conda_pkg_tmp
          snakemake --use-singularity --singularity-args "$SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --cluster '$(pwd)/bin/immediate_submit.py {dependencies} slurm' --immediate-submit -pr --notemp --latency-wait 600 $SM_ARGS $DRY
        unset CONDA_PKGS_DIRS
  elif [[ $CLUSTER == "sge" ]]; then
        snakemake --use-singularity --singularity-args "$SI_ARGS" --jobs $NJOBS --cluster-config $CLUSTER_CONFIG --cluster "$(pwd)/bin/immediate_submit.py '{dependencies}' sge" --immediate-submit -pr --notemp --latency-wait 600 busco $SM_ARGS $DRY
  elif [[ $CLUSTER == "serial" ]]; then
    snakemake --use-singularity --singularity-args "$SI_ARGS" -pr --notemp $SM_ARGS -r busco $DRY
  else
          echo "Submission system not recognized"
          exit 1
  fi
fi




