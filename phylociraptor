#!/usr/bin/env python

import sys, os, io
import time
if sys.version_info[0] < 3:
	raise Exception("Must be using Python 3")

import argparse
import subprocess


#some basic variables needed:
njobs = "10001"
latency_wait = "10" #in seconds
singularity_bindpoints = "-B $(pwd)/.usr_tmp:/usertmp"
debug=True
default_help = """
Welcome to phylociraptor, the rapid phylogenomic tree calculator

Usage: phylociraptor <command> <arguments>

Commands:
	setup			Setup pipeline
	orthology		Infer orthologs in a set of genomes
	filter-orthology	Filter orthology results
	align			Create alignments for orthologous genes
	filter-align		Trim and filter alignments
	model			Perform modeltesting
	tree			Calculate Maximum-Likelihood phylogenomic trees
	speciestree		Calculate gene trees and species tree
	njtree			Calculate Neighbor-Joining tree
	report			Create a HTML report of the run

	-v, --version 		Print version
	-h, --help		Display help

Example:
	To see options for the setup step:
	./phylociraptor setup -h

	To run orthology inferrence for a set of genomes on a SLURM cluster:
	./phylociraptor orthology -t slurm -c data/cluster-config-SLURM.yaml

	To filter alignments overwriting the number of parsimony informative sites set in the config file:
	./phylciraptor filter-align --npars_cutoff 12
        
"""

setup_help = """
phylociraptor setup - will prepare your analysis

Usage: phylociraptor setup <arguments>

Argumemts:
	-t, --cluster		Specify cluster type. Options: slurm, sge, torque, serial. Default: serial
	-c, --cluster-config	Specify Cluster config file path. Default: None
	-f, --force		Force run this part in case it has already been run.
	
	--dry			Make a dry run.
	--verbose		Display more output.
	-h, --help		Display help.

Additonal customization:
	--config-file		Custom config-file path. (Default: data/config.yaml)	
	--busco_set		BUSCO set to download. (Default: value from config.yaml)
	--samples_csv		Samples CSV file path. (Default: value from config.yaml)
"""

orthology_help = """
phylociraptor orthology - Will infer orthologous genes in a set of genomes.

Usage: phylociraptor orthology <arguments>

Argumemts:
        -t, --cluster           Specify cluster type. Options: slurm, sge, torque, serial. Default: serial.
        -c, --cluster-config    Specify Cluster config file path. Default: None
        -f, --force             Force run this part in case it has already been run.
        
        --dry                   Make a dry run.
        --verbose               Display more output.
        -h, --help              Display help.

Additonal customization:
	--config-file           Custom config-file path. (Default: data/config.yaml)
	--busco_threads		Number of threads for each BUSCO run. (Default: value from config.yaml)
	--augustus_species	Pretrained species for Augustus. (Deafult: value from config.yaml)
	--additional_params	Additional parameter passed on to BUSCO. Must be placed inside quotes. (Default: value from config.yaml)
	        
"""

forthology_help = """
phylociraptor filter-orthology - Will filter orthology results produced by phylociraptor orthology.

Usage: phylociraptor filter-orthology <arguments>

Argumemts:
        -t, --cluster           Specify cluster type. Options: slurm, sge, torque, serial. Default: serial
        -c, --cluster-config    Specify Cluster config file path. Default: None
        -f, --force             Force run this part in case it has already been run.
        
        --dry                   Make a dry run.
        --verbose               Display more output.
        -h, --help              Display help.

Additional customization:
	--config-file           Custom config-file path. (Default: data/config.yaml)
	--dupseq		Set how occasionally found duplicated sequences should be handled.
				Options: persample; remove only samples with duplicated sequences
					 perfiler; remove complete file
				(Default: value from config.yaml)
	--cutoff		Minimum BUSCO completeness for a sample to be kept.
				(Default: value from config.yaml)
	--minsp			Mimimum number of species that need to have a BUSCO gene for it to be kept.
				(Default: value from config.yaml)
	--seq_type		Type of sequence data to use. Options (aa, nu).
				(Default: value from config.yaml)
        
"""

align_help = """
phylociraptor align - Will filter create alignments for a set of single-copy orthologous genes.

Usage: phylociraptor align <arguments>

Argumemts:
	-t, --cluster           Specify cluster type. Options: slurm, sge, torque, serial. Default: serial
	-c, --cluster-config    Specify Cluster config file path. Default: None
	-f, --force             Force run this part in case it has already been run.

	--dry                   Make a dry run.
	--verbose               Display more output.
	-h, --help              Display help.

Additional customization:
	--config-file           Custom config-file path. (Default: data/config.yaml)
	--method		Alignment method. Options: mafft (Default: mafft; read from config.yaml)
	--parameters        	Commandline arguments for alignment method. (Default: read from config.yaml)
	--threads		Number of threads for alignment step. (Default: read from config.yaml)	

"""

falign_help = """
phylociraptor filter-align - Will filter alignments.

Usage: phylociraptor filter-align <arguments>

Argumemts:
	-t, --cluster           Specify cluster type. Options: slurm, sge, torque, serial. Default: serial
	-c, --cluster-config    Specify Cluster config file path. Default: None
	-f, --force             Force run this part in case it has already been run.

	--dry                   Make a dry run.
	--verbose               Display more output.
	-h, --help              Display help.

Additional customization:
	--config-file           Custom config-file path. (Default: data/config.yaml)
	--min_parsimony_sites	Minimum number of parsimony informative sites in each alignments.
	--method		Trimming method. Options: trimal, aliscore (Default: read from config.yaml)
	--parameters        	Commandline arguments for trimming method. (Default: read from config.yaml)

"""

sptree_help = """
phylociraptor speciestree - Will calculate single-gene trees and a species tree.

Usage: phylociraptor speciestree <arguments>

Argumemts:
	-t, --cluster           Specify cluster type. Options: slurm, sge, torque, serial. Default: serial
	-c, --cluster-config    Specify Cluster config file path. Default: None
	-f, --force             Force run this part in case it has already been run.

	--dry                   Make a dry run.
	--verbose               Display more output.
	-h, --help              Display help.

"""

njtree_help = """
phylociraptor njtree - Will calculate a NJ tree.

Usage: phylociraptor njtree <arguments>

Argumemts:
	-t, --cluster           Specify cluster type. Options: slurm, sge, torque, serial. Default: serial
	-c, --cluster-config    Specify Cluster config file path. Default: None
	-f, --force             Force run this part in case it has already been run.

	--dry                   Make a dry run.
	--verbose               Display more output.
	-h, --help              Display help.

"""

model_help = """
phylociraptor model - Will perform substitution model tests for each alignment.

Usage: phylociraptor model <arguments>

Argumemts:
	-t, --cluster           Specify cluster type. Options: slurm, sge, torque, serial. Default: serial
	-c, --cluster-config    Specify Cluster config file path. Default: None
	-f, --force             Force run this part in case it has already been run.

	--dry                   Make a dry run.
	--verbose               Display more output.
	-h, --help              Display help.

"""
report_help = """
phylociraptor report - Will create a HTML report of the run

Usage: phylociraptor report <arguments>

Argumemts:
	--verbose               Display more output.
	-h, --help              Display help.

"""

def progressbar(it, progress, prefix="", size=60, file=sys.stdout):
	count = len(it)
	def show(j):
		x = int(size*j/count)
		return "%s[%s%s] %i/%i\r" % (prefix, "#"*x, "."*(size-x), j, count)
	return show(progress)

def help_message(mes):
	return mes

def determine_submission_mode(flag):
	cmd = []
	if "serial" in flag:
		return ["--cores"]
	else:
		return ["--cluster", 'bin/immediate_submit.py {dependencies} %s' % flag, "--immediate-submit", "--jobs", njobs, "--notemp"]

def get_flags(flags):
	mapdict ={
	#"t": '--cluster "bin/immediate_submit.py {dependencies} ', "cluster": '--cluster "bin/immediate_submit.py {dependencies} ',
	"c": "--cluster-config", "cluster_config": "--cluster-config",
	"force": "-F",
	"dry": "-n"
	}
	cmd = []
	for flag in flags.keys():
		#print(flag)
		if flag in mapdict.keys() and flags[flag] != None:
			if flag == "t" or flag == "cluster": #handle cluster specification
				arg = mapdict[flag]
				arg = arg + " "+flags[flag]+'"'
				cmd.append(arg) 
			if flag == "c" or flag == "cluster_config": #handle cluster config file
				#print("here")
				#arg = mapdict[flag]
				#arg = arg + " " + flags[flag]
				cmd.append(mapdict[flag])
				cmd.append(flags[flag])
			else:
				if flags[flag]:
					cmd.append(mapdict[flag])
	
	return cmd

def check_required_files(runmode):
	outfile_dict = {
	"setup": ["data/config.yaml"],
	"orthology": ["data/config.yaml", ".phylogenomics_setup.done"],
	"filter-orthology": [".phylogenomics_setup.done", "checkpoints/orthology.done"],
	"align": [".phylogenomics_setup.done", "checkpoints/orthology.done", "checkpoints/filter_orthology.done"],
	"filter-align": [".phylogenomics_setup.done", "checkpoints/orthology.done", "checkpoints/filter_orthology.done", "checkpoints/align_trim.done"],
	"speciestree": [".phylogenomics_setup.done", "checkpoints/orthology.done", "checkpoints/filter_orthology.done", "checkpoints/align_trim.done", "checkpoints/filter_align.done"],
	"njtree": [".phylogenomics_setup.done", "checkpoints/orthology.done", "checkpoints/filter_orthology.done", "checkpoints/align_trim.done", "checkpoints/filter_align.done"],
	"tree": [".phylogenomics_setup.done", "checkpoints/orthology.done", "checkpoints/filter_orthology.done", "checkpoints/align_trim.done", "checkpoints/filter_align.done"],
	"model": [".phylogenomics_setup.done", "checkpoints/orthology.done", "checkpoints/filter_orthology.done", "checkpoints/align_trim.done", "checkpoints/filter_align.done"],
	"report": [".phylogenomics_setup.done"]
	}
	
	for f in outfile_dict[runmode]:
		if not os.path.isfile(f):
			return f
	return

def check_config_file(f):
	if os.path.isfile(f):
		return ["--configfile", f]
	else:
		print("Config file specified with --config-file not found:", f)
		sys.exit(0)

def execute_command(cmd, verbose):
	popen = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
	line = ""
	jobcounts = False
	njobs = 0
	char = ""
	nline = 0
	curr_task = 0
	if "-n" in cmd:
		for line in io.TextIOWrapper(popen.stdout, encoding="utf-8"):
			nline += 1
			if verbose:
				#yield line[:-1] +"\n"
				yield line
				#if char != "\n":
				#	line += char
				#else:
				#	result = line
				#	line = ""
				#	yield result
					#sys.stdout.flush()
			else:
				result = line
				#print(result)
				if result.startswith("Error") or result.startswith("error"):
					yield "There was an error. Maybe run with --verbose to diagnose. The error occurred here: %s " % result
				if result.startswith("Nothing"):
					yield "There is nothing to do. If you want to force a rerun of this step try: -f\n"
				if result.startswith("Job counts"):
					jobcounts = True
					#yield result
				elif jobcounts and result != "" and nline <= 30: #only keep jobcount info from the beginning of the output
					if len(result.split("\t")) == 2: # the line with the total number of jobs has two elements
						yield "Total number of tasks to run: %s\n" % result.split("\t")[1] 
				elif jobcounts and result == "":
					jobcounts = False
				line=""
	elif "--cluster" in cmd:
		for line in io.TextIOWrapper(popen.stdout, encoding="utf-8"):
			nline += 1
			if verbose:
				yield line
			else:
				result = line
				if result.startswith("Error") or result.startswith("error"):
					yield "There was an error. Maybe run with --verbose to diagnose. The error occurred here: %s " % result
				if result.startswith("Job counts"):
					jobcounts = True	
				elif jobcounts and result != "" and nline <= 30: #only keep jobcount info from the beginning of the output
					if len(result.split("\t")) == 2: # the line with the total number of jobs has two elements
						yield "Total number of jobs to submit: %s\n" % result.split("\t")[1]
						njobs = int(result.split("\t")[1])
				elif jobcounts and result == "":
					jobcounts = False
				if line.startswith("rule"):
					curr_task += 1
					yield progressbar(range(njobs),curr_task, "Submitting: ", 100)
				line=""
	else:
		for line in io.TextIOWrapper(popen.stdout, encoding="utf-8"):
			nline += 1
			if verbose:
				yield line
			else:
				result = line
				if result.startswith("Error") or result.startswith("error"):
					yield "There was an error. Maybe run with --verbose to diagnose. The error occurred here: %s " % result
				if result.startswith("Job counts"):
					jobcounts = True	
				elif jobcounts and result != "" and nline <= 30: #only keep jobcount info from the beginning of the output
					if len(result.split("\t")) == 2: # the line with the total number of jobs has two elements
						yield "Total number of tasks to run: %s\n" % result.split("\t")[1]
						njobs = int(result.split("\t")[1])
				elif jobcounts and result == "":
					jobcounts = False
				if line.startswith("rule"):
					curr_task += 1
					yield progressbar(range(njobs),curr_task, "Runnning: ", 100)
				line=""
		
pars = argparse.ArgumentParser(usage=help_message(default_help))
pars.add_argument('command', action='store')
pars.add_argument('arguments', action='store', nargs=argparse.REMAINDER)

args = pars.parse_args()

if args.command == "setup":
	#setup_parser = argparse.ArgumentParser("phylociraptor setup", description = """Description: phylociraptor setup - Will help to setup your analysis.""", epilog = """written by Philipp Resl and Christoph Hahn""", usage=help_message(setup_help), add_help=False)	
	setup_parser = argparse.ArgumentParser(usage=help_message(setup_help), add_help=False)
	setup_parser.add_argument("-f", "--force", action="store_true" )
	setup_parser.add_argument("-t", "--cluster",  action="store", default="serial")
	setup_parser.add_argument("-c", "--cluster-config", action="store")
	setup_parser.add_argument("--dry", action="store_true")
	setup_parser.add_argument("-h", "--help", action="store_true")
	setup_parser.add_argument("--verbose", action="store_true", default=False)
	setup_parser.add_argument("--config-file", action="store", dest="config_file")
	setup_parser.add_argument("--samples-csv", action="store", dest="samples_file")
	setup_parser.add_argument("--busco-set", action="store", dest="busco_set")
	
	setup_args = setup_parser.parse_args(args.arguments)
	
	if setup_args.help:
		print(help_message(setup_help))
		sys.exit(0)
	
	print("Preparing to run phylociraptor setup...")
	cmd = ["snakemake","-p", "-s" , "rules/setup.smk", "--use-singularity", "-r", "setup", "--latency-wait", latency_wait]
	cmd += get_flags(vars(setup_args))
	cmd += determine_submission_mode(setup_args.cluster)

	# check for overrides of config file parameters	
	if setup_args.config_file:
		cmd += check_config_file(setup_args.config_file)
	if setup_args.busco_set or setup_args.samples_file:
		cmd += ["--config"]
		if not os.path.isfile(setup_args.samples_file):
			print("File specified with --samples-csv not found:", setup_args.samples_file)
			sys.exit(0)
		cmd += ["busco={set: %s}" % setup_args.busco_set]
		cmd += ["species='%s'" % setup_args.samples_file]
	
	#args=""
	#if setup_args.busco_set:
	#	args += "busco={set: %s}"%setup_args.busco_set
	#if setup_args.samples_file:
	#	args += ",species={%s}"%setup_args.samples_file	
	#execute_command(cmd)
	for line in execute_command(cmd, setup_args.verbose):
		print(line, end="\r")
	print("\ndone")
	if debug:
		print(cmd)
	#print(p.stdout)
	#print(p.stderr)
if args.command=="orthology":
	orthology_parser = argparse.ArgumentParser(usage=help_message(orthology_help),add_help=False)	
	orthology_parser.add_argument("-f", "--force", action="store_true")
	orthology_parser.add_argument("-t", "--cluster",  action="store", default="serial")
	orthology_parser.add_argument("-c", "--cluster-config", action="store")
	orthology_parser.add_argument("--dry", action="store_true")
	orthology_parser.add_argument("-h", "--help", action="store_true")
	orthology_parser.add_argument("--verbose", action="store_true", default=False)	
	orthology_parser.add_argument("--busco_threads", action="store")
	orthology_parser.add_argument("--config-file", action="store", dest="config_file")
	orthology_parser.add_argument("--augustus_species", action="store")
	orthology_parser.add_argument("--additional_params", action="store")
	orthology_args = orthology_parser.parse_args(args.arguments)
	#if len(sys.argv) < 3: # too few argument
	#	print(help_message(orthology_help))
	#	sys.exit(0)
	if orthology_args.help: # help is specified
		print(help_message(orthology_help))
		sys.exit(0)
	if check_required_files(args.command):
		print("Some files are missing preventing this part to run.\nDid your run phylociraptor setup already? Missing file:", check_required_files(args.command))
	#print(orthology_args)
	cmd = ["snakemake","-p", "-s", "rules/orthology.smk", "--use-singularity", "--singularity-args", "%s"% singularity_bindpoints,"-r", "orthology", "--latency-wait", latency_wait]
	cmd += determine_submission_mode(orthology_args.cluster)
	cmd += get_flags(vars(orthology_args))

	# check for overrides of config file parameters	
	if orthology_args.config_file:
		cmd += check_config_file(orthology_args.config_file)
	if orthology_args.busco_threads or orthology_args.augustus_species or orthology_args.additional_params:
		cmd += ["--config"]
		arg = "busco={"
		if orthology_args.busco_threads: #evaluation of this string by snakemake is lazy, it does not seem to matter if there are extra , characters...
			arg += "threads: %s, " % orthology_args.busco_threads
		if orthology_args.augustus_species:
			arg += "augustus_species: %s, " % orthology_args.augustus_species
		if orthology_args.additional_params:
			arg += "additional_parameters: %s " % orthology_args.additional_params
		arg+="}"
		cmd += [arg]

	
	print("Preparing to run phylociraptor orthology...")
	for line in execute_command(cmd, orthology_args.verbose):
                print(line, end="\r")
	print("\ndone")
	if debug:
		print(cmd)
if args.command=="filter-orthology":
	forthology_parser = argparse.ArgumentParser(add_help=False)
	forthology_parser.add_argument("-f", "--force", action="store_true")
	forthology_parser.add_argument("-t", "--cluster",  action="store", default="serial")
	forthology_parser.add_argument("-c", "--cluster-config", action="store")
	forthology_parser.add_argument("--dry", action="store_true")
	forthology_parser.add_argument("-h", "--help", action="store_true")
	forthology_parser.add_argument("--verbose", action="store_true", default=False)
	forthology_parser.add_argument("--config-file", action="store", dest="config_file")
	forthology_parser.add_argument("--dupseq", action="store")
	forthology_parser.add_argument("--cutoff", action="store")
	forthology_parser.add_argument("--minsp", action="store")
	forthology_parser.add_argument("--seqtype", action="store")
	
	forthology_args = forthology_parser.parse_args(args.arguments)	
	#if len(sys.argv) < 3: # too few argument
	#	print(help_message(forthology_help))
	#	sys.exit(0)
	if forthology_args.help: # help is specified
		print(help_message(forthology_help))
		sys.exit(0)
	if check_required_files(args.command):
		print("Some files are missing preventing this part to run.\nDid your run phylociraptor setup and orthology already? Missing file:", check_required_files(args.command))
		sys.exit(0)
	cmd = ["snakemake", "-p", "-s", "rules/filter-orthology.smk", "--use-singularity", "--singularity-args", "%s"% singularity_bindpoints,"-r", "filter_orthology", "--latency-wait", latency_wait]
	cmd += determine_submission_mode(forthology_args.cluster)
	cmd += get_flags(vars(forthology_args))
	
	# check for overrides of config file parameters	
	if forthology_args.config_file:
		cmd += check_config_file(forthology_args.config_file)
	if forthology_args.dupseq or forthology_args.cutoff or forthology_args.minsp or forthology_args.seqtype:
		cmd += ["--config"]
		arg = "filtering={"
		if forthology_args.dupseq:
			if forthology_args.dupseq in ["persample", "perfile"]:
				arg += "dupseq: %s, "% forthology_args.dupseq
			else:
				print("Wrong parameter specified for --dupseq: ", forthology_args.dupseq)
				sys.exit(0)
		if forthology_args.cutoff:
			if float(forthology_args.cutoff) >=0 and float(forthology_args.cutoff) <=1:
				arg += "cutoff: %s, " % forthology_args.cutoff
			else:
				print("Wrong parameter specified for --cutoff: ", forthology_args.dubseq)	
				sys.exit(0)
		if forthology_args.minsp:
			arg += "minsp: %s, " %forthology_args.minsp
		if forthology_args.seqtype:
			if forthology_args.seqtype in ["aa", "nu"]:
				arg += "seq_type: %s " % forthology_args.seqtype
			else:
				print("Wrong parameter specified for --seqtype: ", forthology_args.seqtype)
				sys.exit(0)
		arg += "}"
		cmd += [arg]
	
	print("Preparing to run phylociraptor filter-orthology...")
	for line in execute_command(cmd, forthology_args.verbose):
                print(line, end="\r")
	if debug:
		print(cmd)
if args.command=="align":
	align_parser = argparse.ArgumentParser(usage=help_message(align_help), add_help=False)
	align_parser.add_argument("-f", "--force", action="store_true")
	align_parser.add_argument("-t", "--cluster",  action="store", default="serial")
	align_parser.add_argument("-c", "--cluster-config", action="store")
	align_parser.add_argument("--dry", action="store_true")
	align_parser.add_argument("-h", "--help", action="store_true")
	align_parser.add_argument("--verbose", action="store_true", default=False)
	align_parser.add_argument("--config-file", action="store", dest="config_file")
	align_parser.add_argument("--method", action="store")
	align_parser.add_argument("--threads", action="store")
	align_parser.add_argument("--parameters", action="store")
	align_args = align_parser.parse_args(args.arguments)	
	#if len(sys.argv) < 3: # too few argument
	#	print(help_message(forthology_help))
	#	sys.exit(0)
	if align_args.help: # help is specified
		print(help_message(align_help))
		sys.exit(0)
	if check_required_files(args.command):
		print("Some files are missing preventing this part to run.\nDid your run the required steps before? Missing file:", check_required_files(args.command))
		sys.exit(0)

	cmd = ["snakemake", "-p", "-s", "rules/align.smk", "--use-singularity", "--singularity-args", "%s"% singularity_bindpoints,"-r", "all_align", "--latency-wait", latency_wait]
	cmd += determine_submission_mode(align_args.cluster)
	cmd += get_flags(vars(align_args))

	# check for overrides of config file parameters	
	if align_args.config_file:
		cmd += check_config_file(align_args.config_file)
	if align_args.method or align_args.threads or align_args.parameters:
		cmd += ["--config"]
		arg = "alignment={"
		if align_args.method:
			if align_args.method in ["mafft"]:
				arg += "method: %s, " % align_args.method
			else:
				print("Wrong parameter specified with --method:", align_args.method)
				sys.exit(0)	
		if align_args.threads:
			arg += "threads: %s, " % align_args.threads
		if align_args.parameters:
			arg += "parameters: '%s'" % align_args.parameters
		arg += " }"
		cmd += [arg]	
	print("Preparing to run phylociraptor align...")
	for line in execute_command(cmd, align_args.verbose):
                print(line, "\r")
	print("\ndone")
	if debug:
		print(cmd)
if args.command=="filter-align":
	falign_parser = argparse.ArgumentParser(usage=help_message(falign_help), add_help=False)
	falign_parser.add_argument("-f", "--force", action="store_true")
	falign_parser.add_argument("-t", "--cluster",  action="store", default="serial")
	falign_parser.add_argument("-c", "--cluster-config", action="store")
	falign_parser.add_argument("--dry", action="store_true")
	falign_parser.add_argument("-h", "--help", action="store_true")
	falign_parser.add_argument("--verbose", action="store_true", default=False)
	falign_parser.add_argument("--config-file", action="store", dest="config_file")
	falign_parser.add_argument("--method", action="store")
	falign_parser.add_argument("--parameters", action="store")
	falign_parser.add_argument("--min_parsimony_sites", action="store")
	
	falign_args = falign_parser.parse_args(args.arguments)	
	#if len(sys.argv) < 3: # too few argument
	#	print(help_message(forthology_help))
	#	sys.exit(0)
	if falign_args.help: # help is specified
		print(help_message(falign_help))
		sys.exit(0)
	if check_required_files(args.command):
		print("Some files are missing preventing this part to run.\nDid your run the required steps before? Missing file:", check_required_files(args.command))
		sys.exit(0)

	cmd = ["snakemake","-p", "-s", "rules/filter-align.smk", "--use-singularity", "--singularity-args", "%s"% singularity_bindpoints,"-r", "part_filter_align", "--latency-wait", latency_wait]
	cmd += determine_submission_mode(falign_args.cluster)
	cmd += get_flags(vars(falign_args))
	
	# check for overrides of config file parameters	
	if falign_args.config_file:
		cmd += check_config_file(falign_args.config_file)
	if falign_args.method or falign_args.min_parsimony_sites or falign_args.parameters:
		cmd += ["--config"]
		arg = "trimming={" 
		if falign_args.min_parsimony_sites:
			arg += "min_parsimony_sites: %s, " % falign_args.min_parsimony_sites
		if falign_args.method:
			arg += "method: %s, " % falign_args.method
		if falign_args.parameters:
			arg += "parameters: %s " % falign_args.parameters
		arg += "}"
		cmd += [arg]

	print("Preparing to run phylociraptor filter-align...")
	for line in execute_command(cmd, falign_args.verbose):
                print(line, end="\r")
	if debug:
		print(cmd)
if args.command=="speciestree":
	sptree_parser = argparse.ArgumentParser(add_help=False)
	sptree_parser.add_argument("-f", "--force", action="store_true")
	sptree_parser.add_argument("-t", "--cluster",  action="store", default="serial")
	sptree_parser.add_argument("-c", "--cluster-config", action="store")
	sptree_parser.add_argument("--dry", action="store_true")
	sptree_parser.add_argument("-h", "--help", action="store_true")
	sptree_parser.add_argument("--verbose", action="store_true", default=False)
	sptree_args = sptree_parser.parse_args(args.arguments)	
	#if len(sys.argv) < 3: # too few argument
	#	print(help_message(forthology_help))
	#	sys.exit(0)
	if sptree_args.help: # help is specified
		print(help_message(sptree_help))
		sys.exit(0)
	if check_required_files(args.command):
		print("Some files are missing preventing this part to run.\nDid your run the required steps before? Missing file:", check_required_files(args.command))
		sys.exit(0)

	cmd = ["snakemake", "-p","-s", "rules/speciestree.smk", "--use-singularity", "--singularity-args", "%s"% singularity_bindpoints,"-r", "speciestree", "--latency-wait", latency_wait]
	cmd += determine_submission_mode(sptree_args.cluster)
	cmd += get_flags(vars(sptree_args))
	
	print("Preparing to run phylociraptor speciestree...")
	for line in execute_command(cmd, sptree_args.verbose):
                print(line, sep="\r")
	if debug:
		print(cmd)
if args.command=="njtree":
	njtree_parser = argparse.ArgumentParser(add_help=False)
	njtree_parser.add_argument("-f", "--force", action="store_true")
	njtree_parser.add_argument("-t", "--cluster",  action="store", default="serial")
	njtree_parser.add_argument("-c", "--cluster-config", action="store")
	njtree_parser.add_argument("--dry", action="store_true")
	njtree_parser.add_argument("-h", "--help", action="store_true")
	njtree_parser.add_argument("--verbose", action="store_true", default=False)
	njtree_args = njtree_parser.parse_args(args.arguments)	
	#if len(sys.argv) < 3: # too few argument
	#	print(help_message(forthology_help))
	#	sys.exit(0)
	if njtree_args.help: # help is specified
		print(help_message(njtree_help))
		sys.exit(0)
	if check_required_files(args.command):
		print("Some files are missing preventing this part to run.\nDid your run the required steps before? Missing file:", check_required_files(args.command))
		sys.exit(0)

	cmd = ["snakemake", "-s", "rules/quicktree.smk", "--use-singularity", "--singularity-args", "%s"% singularity_bindpoints,"-r", "njtree", "--latency-wait", latency_wait]
	cmd += determine_submission_mode(njtree_args.cluster)
	cmd += get_flags(vars(njtree_args))
	
	print("Preparing to run phylociraptor njtree...")
	for line in execute_command(cmd, njtree_args.verbose):
                print(line, end="\r")
	if debug:
		print(cmd)
if args.command=="tree":
	tree_parser = argparse.ArgumentParser(prog="phylociraptor tree", description = """Description: phylociraptor tree - Will calculate a ML tree.""", epilog = """written by Philipp Resl and Christoph Hahn""", add_help=False)
	tree_parser.add_argument("-f", "--force", action="store_true", help="Force this step in case it has been run before")
	tree_parser.add_argument("-t", "--cluster",  action="store", help="Submission system. Possible options: slurm, sge, torque, serial (no submission; default).", default="serial")
	tree_parser.add_argument("-c", "--cluster-config", action="store", help="Cluster config file.")
	tree_parser.add_argument("--dry", action="store_true", help="Only a dry run")
	tree_parser.add_argument("-h", "--help", action="store_true")
	tree_parser.add_argument("--verbose", action="store_true", default=False)
	tree_args = tree_parser.parse_args(args.arguments)	
	print(sys.argv)
	#if len(sys.argv) < 3: # too few argument
	#	print(help_message(forthology_help))
	#	sys.exit(0)
	if tree_args.help: # help is specified
		print(help_message(tree_help))
		sys.exit(0)
	if check_required_files(args.command):
		print("Some files are missing preventing this part to run.\nDid your run the required steps before? Missing file:", check_required_files(args.command))
		sys.exit(0)

	cmd = ["snakemake", "-s", "rules/tree.smk", "--use-singularity", "--singularity-args", "%s"% singularity_bindpoints,"-r", "part3", "--latency-wait", latency_wait]
	cmd += determine_submission_mode(tree_args.cluster)
	cmd += get_flags(vars(tree_args))
	
	print("Preparing to run phylociraptor tree...")
	for line in execute_command(cmd, tree_args.verbose):
                print(line, end="\r")
	if debug:
		print(cmd)
if args.command=="model":
	model_parser = argparse.ArgumentParser(add_help=False)
	model_parser.add_argument("-f", "--force", action="store_true")
	model_parser.add_argument("-t", "--cluster",  action="store", default="serial")
	model_parser.add_argument("-c", "--cluster-config", action="store")
	model_parser.add_argument("--dry", action="store_true")
	model_parser.add_argument("-h", "--help", action="store_true")
	model_parser.add_argument("--verbose", action="store_true", default=False)
	model_args = model_parser.parse_args(args.arguments)	
	#if len(sys.argv) < 3: # too few argument
	#	print(help_message(forthology_help))
	#	sys.exit(0)
	if model_args.help: # help is specified
		print(help_message(model_help))
		sys.exit(0)
	if check_required_files(args.command):
		print("Some files are missing preventing this part to run.\nDid your run the required steps before? Missing file:", check_required_files(args.command))
		sys.exit(0)

	cmd = ["snakemake", "-p", "-s", "rules/model.smk", "--use-singularity", "--singularity-args", "%s"% singularity_bindpoints,"-r", "part_modeltest", "--latency-wait", latency_wait]
	cmd += determine_submission_mode(model_args.cluster)
	cmd += get_flags(vars(model_args))
	
	print("Preparing to run phylociraptor model...")
	for line in execute_command(cmd, model_args.verbose):
                print(line, end="\r")
	if debug:
		print(cmd)	
if args.command=="report":
	report_parser = argparse.ArgumentParser(add_help=False)
	report_parser.add_argument("-h", "--help", action="store_true")
	report_parser.add_argument("--verbose", action="store_true", default=False)
	report_args = report_parser.parse_args(args.arguments)
	print("Will create a phylociraptor report...")
	
	if report_args.help: # help is specified
		print(help_message(report_help))
		sys.exit(0)

	if check_required_files(args.command):
		print("Some files are missing preventing this part to run.\nDid your run the required steps before? Missing file:", check_required_files(args.command))
		sys.exit(0)
	rcommand = """ rmarkdown::render('./bin/report.Rmd') """
	cmd = ["singularity", "exec", "docker://reslp/rmarkdown:4.0.3", "Rscript", "-e", rcommand]
	#proc = subprocess.run(cmd)
	for line in execute_command(cmd, report_args.verbose):
                print(line, end="\r")
	if debug:
		print(cmd)	

		
